{
    "collab_server" : "",
    "contents" : "$( document ).ready(() => {\n\n    //javascript for intro loader\n\n    //Function to immitate R's seq\n    function seq(start, end, increment) {\n      var length = Math.round((end - start)/increment);\n      return Array(length).fill().map((_, idx) => start + idx*increment)\n    }\n\n\n    //define the pdf of the distribution.\n    var logistic = function(x, theta, i) {\n        var mu = 0.1;\n        sign = 1\n        var y = sign * (1 / (Math.sqrt(2 * Math.PI) * theta)) * (1 / x) *\n            Math.exp(-Math.pow((Math.log(x) - mu), 2) / (2 * Math.pow(theta, 2)))\n        return y;\n    }\n\n    var width   = $(\".main-header\").width() ,\n        height  = $(\".main-header\").outerHeight(),\n        padding = 10,\n        numOfLines = 20,\n        xs = seq(0.01, 5, .01),\n        colors = ['rgb(165,0,38)', 'rgb(215,48,39)', 'rgb(244,109,67)', 'rgb(253,174,97)', 'rgb(254,224,144)',\n            'rgb(224,243,248)', 'rgb(171,217,233)', 'rgb(116,173,209)', 'rgb(69,117,180)', 'rgb(49,54,149)'\n        ];\n  \n    console.log(\"trying to run this shit.\")\n    //define the svg.\n    var svg = d3.select(\"#header_viz\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height + 2 * padding)\n        .append(\"g\")\n\n\n    var animatelines = function(whichline) {\n        d3.selectAll(\".line\").style(\"opacity\",\"0.5\");\n\n        //Select All of the lines and process them one by one\n        d3.selectAll(\".line\").each(function(d,i){\n            // Get the length of each line in turn\n            var totalLength = d3.select(\"#line\" + i).node().getTotalLength();\n\n            d3.selectAll(\"#line\" + i).attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n              .attr(\"stroke-dashoffset\", totalLength)\n              .transition()\n              .duration(5000)\n              .delay(100*i)\n              .attr(\"stroke-dashoffset\", 0)\n              .style(\"stroke-width\",2)\n        })\n\n        writeGreeting()\n    }\n\n\n\n    // The Scales:\n    var thetaMap = d3.scaleLinear() //name the values from 0 to 20 and make their values from .1-.7\n        .domain([0, numOfLines])\n        .range([0.8, 0.085])\n\n    var yPos = d3.scaleLinear() //scalling for creating horizontal lines\n        .domain([0, numOfLines])\n        .range([0, 4])\n\n    var x = d3.scaleLinear()\n        .domain([0, 5])\n        .range([0, width]);\n\n    var y = d3.scaleLinear()\n        .domain([0, 4.5])\n        .range([height, 0]);\n\n    // The line functions:\n    var logistic = d3.range(numOfLines).map(function(i) {\n        var odd = true\n        var toReturn = xs.map(function(num) {\n            return {\n                \"x\": num,\n                \"y\": logistic(num, thetaMap(i), i)\n            }\n        })\n        return toReturn;\n    })\n\n    //make a greeting message for after the line animation.\n    function writeGreeting(){\n\n        var text_scale = width < 500 ? 1 : 0.65;\n        console.log(text_scale);\n        var intro_text = \"Live Free or Dichotomize\";\n\n        var title = svg.append(\"text\")\n            .attr(\"font-size\", 30)\n            .attr(\"font-family\", \"optima\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"fill-opacity\", 0.65)\n            .attr(\"x\", width < 500 ? x(4.8) : x(4.2))\n            .attr(\"y\", width < 500 ? y(3.12) : y(2.1) )\n            .attr(\"opacity\", 0)\n            .text(intro_text)\n            .attr(\"font-size\", function(d) { return ( text_scale*width - 8) / this.getComputedTextLength() * 24 + \"px\"; })\n            .text(\"\")\n            .attr(\"opacity\", 1);\n\n        (function drawGreeting (i, start, greeting) {\n            setTimeout(function () {\n\n                //add next letter to the greeting in progress\n                start += greeting[i];\n\n                title.html(start) //append this to the html\n\n                if (start.length < greeting.length) { //if the in progress greeting is less than the full, keep going.\n                    drawGreeting(i+1,start,greeting);      //  increment i and call again.\n                };\n            }, 100)\n        })(0, \"\", intro_text);\n    }\n\n\n    // The d3 stuff\n    var line = d3.line()\n        // .interpolate(\"basis\")\n        .x(function(d) { return x(d.x); })\n        .y(function(d) { return y(d.y); });\n\n\n    svg.selectAll(\".line\")\n        .data(logistic)\n        .enter().append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"id\" , function(d, i){ return \"line\" + i;})\n        .attr(\"d\", line)\n        .style(\"stroke-width\", 2)\n        .style(\"stroke\", function(d, i) { return colors[i % 10] })\n        .style(\"opacity\", 0)\n        .style(\"fill\", \"none\")\n        .on(\"mouseover\", function(d){\n            d3.select(this).style(\"stroke\", \"black\")\n        })\n        .on(\"mouseout\", function(d,i){\n            d3.select(this).style(\"stroke\", colors[i % 10])\n        })\n\n    // var introMessage = isMobile ? \"tap\" : \"click\"\n    // var introMessage = \"click\"\n    //\n    // var intro = svg.append(\"text\")\n    //     .text(introMessage)\n    //     .attr(\"font-size\", 35)\n    //     .attr(\"font-family\", \"optima\")\n    //     .attr(\"text-anchor\", \"middle\")\n    //     .attr(\"x\", x(2.5))\n    //     .attr(\"y\", y(2.01))\n\n    //kick it off on a click. (or tap)\n    animatelines(2)\n    // d3.select(\"svg\").on(\"click\", function() { animatelines(2) })\n\n})\n",
    "created" : 1495644205042.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2938026006",
    "id" : "7361FE83",
    "lastKnownWriteTime" : 1495645039,
    "last_content_update" : 1495645039291,
    "path" : "~/new_blog/static/js/header_lines.js",
    "project_path" : "static/js/header_lines.js",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "js"
}